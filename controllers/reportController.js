import Report from '../models/Report.js';

export async function generateMedicalReport(history) {
  // Extract patient information and symptoms from conversation
  let patientInfo = {
    name: 'Unknown',
    age: 'Unknown',
    symptoms: [],
    concerns: [],
    medications: [],
    allergies: []
  };

  // Parse conversation history to extract relevant information
  for (const message of history) {
    if (message.role === 'user') {
      const text = message.parts[0].text.toLowerCase();
      
      // Extract name
      if (text.includes('my name is') || text.includes('i am') || text.includes('call me')) {
        const nameMatch = text.match(/(?:my name is|i am|call me)\s+([a-zA-Z\s]+)/);
        if (nameMatch) patientInfo.name = nameMatch[1].trim();
      }
      
      // Extract age
      if (text.includes('years old') || text.includes('age')) {
        const ageMatch = text.match(/(\d+)\s*(?:years?\s*old|age)/);
        if (ageMatch) patientInfo.age = ageMatch[1];
      }
      
      // Extract symptoms
      const symptomKeywords = ['pain', 'ache', 'hurt', 'sore', 'fever', 'cough', 'headache', 'nausea', 'dizzy', 'tired', 'fatigue'];
      symptomKeywords.forEach(symptom => {
        if (text.includes(symptom)) {
          patientInfo.symptoms.push(symptom);
        }
      });
      
      // Extract medications
      if (text.includes('medication') || text.includes('medicine') || text.includes('pill')) {
        const medMatch = text.match(/(?:taking|on|medication|medicine|pill)\s+([a-zA-Z\s]+)/);
        if (medMatch) patientInfo.medications.push(medMatch[1].trim());
      }
      
      // Extract allergies
      if (text.includes('allergic') || text.includes('allergy')) {
        const allergyMatch = text.match(/(?:allergic to|allergy to)\s+([a-zA-Z\s]+)/);
        if (allergyMatch) patientInfo.allergies.push(allergyMatch[1].trim());
      }
    }
  }

  // Generate comprehensive medical report
  let report = "=== ESSENTIAL PRE-VISIT SUMMARY ===\n\n";
  
  report += `PATIENT INFORMATION:\n`;
  report += `Name: ${patientInfo.name}\n`;
  report += `Age: ${patientInfo.age}\n`;
  report += `Date: ${new Date().toLocaleDateString()}\n`;
  report += `Time: ${new Date().toLocaleTimeString()}\n\n`;
  
  report += `CHIEF COMPLAINTS:\n`;
  if (patientInfo.symptoms.length > 0) {
    patientInfo.symptoms.forEach((symptom, index) => {
      report += `${index + 1}. ${symptom}\n`;
    });
  } else {
    report += "No specific symptoms mentioned\n";
  }
  report += "\n";
  
  report += `CURRENT MEDICATIONS:\n`;
  if (patientInfo.medications.length > 0) {
    patientInfo.medications.forEach((med, index) => {
      report += `${index + 1}. ${med}\n`;
    });
  } else {
    report += "No current medications reported\n";
  }
  report += "\n";
  
  report += `ALLERGIES:\n`;
  if (patientInfo.allergies.length > 0) {
    patientInfo.allergies.forEach((allergy, index) => {
      report += `${index + 1}. ${allergy}\n`;
    });
  } else {
    report += "No known allergies reported\n";
  }
  report += "\n";
  
  report += `CONVERSATION SUMMARY:\n`;
  report += `Total messages exchanged: ${history.length}\n`;
  report += `Patient messages: ${history.filter(msg => msg.role === 'user').length}\n`;
  report += `AI responses: ${history.filter(msg => msg.role === 'model').length}\n\n`;
  
  report += `RECOMMENDATIONS:\n`;
  report += `1. Review patient's reported symptoms and concerns\n`;
  report += `2. Consider ordering relevant diagnostic tests\n`;
  report += `3. Evaluate current medications for interactions\n`;
  report += `4. Schedule follow-up appointment if needed\n\n`;
  
  report += `Report generated by AI Assistant on ${new Date().toLocaleString()}\n`;
  
  return report;
}

export default {
  async getReport(req, res) {
    try {
      const report = await Report.findOne({ patientId: req.params.patientId });
      if (!report) return res.status(404).send('Report not found');
      res.render('report', { report });
    } catch (error) {
      console.error('Error fetching report:', error);
      res.status(500).send('Error fetching report');
    }
  }
};