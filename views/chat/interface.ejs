<%- include('../partials/header') %>

<div class="container mx-auto px-4 py-8 max-w-4xl">
  <div class="bg-white rounded-lg shadow-lg">
    <!-- Header -->
    <div class="bg-blue-600 text-white p-4 rounded-t-lg">
      <h1 class="text-xl font-semibold">Virtual Medical Consultation</h1>
      <p class="text-sm opacity-90">Session ID: <%= sessionId %></p>
    </div>

    <!-- Chat Messages -->
    <div id="chat-messages" class="h-96 overflow-y-auto p-4 space-y-4">
      <div class="flex justify-center">
        <div class="bg-gray-100 rounded-lg p-3 max-w-xs">
          <p class="text-sm text-gray-600">Welcome! I'm Dr. Cupper, your AI medical assistant. How can I help you today?</p>
        </div>
      </div>
    </div>

    <!-- Input Area -->
    <div class="border-t p-4">
      <form id="chat-form" class="flex gap-2">
        <input 
          type="text" 
          id="message-input" 
          placeholder="Type your message here..." 
          class="flex-1 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
          required
        >
        <button 
          type="submit" 
          class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          Send
        </button>
      </form>
      
      <div class="mt-4 flex justify-between">
        <button 
          id="end-chat-btn" 
          class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500"
        >
          End Consultation & Generate Report
        </button>
        <span class="text-sm text-gray-500">Your conversation will be saved for the medical report</span>
      </div>
    </div>
  </div>
</div>


<script>
const sessionId = '<%= sessionId %>';
const chatMessages = document.getElementById('chat-messages');
const chatForm = document.getElementById('chat-form');
const messageInput = document.getElementById('message-input');
const endChatBtn = document.getElementById('end-chat-btn');

// Add message to chat
function addMessage(text, isUser = false) {
  const messageDiv = document.createElement('div');
  messageDiv.className = `flex ${isUser ? 'justify-end' : 'justify-start'}`;
  
  const messageBubble = document.createElement('div');
  messageBubble.className = `rounded-lg p-3 max-w-xs ${
    isUser 
      ? 'bg-blue-600 text-white' 
      : 'bg-gray-100 text-gray-800'
  }`;
  messageBubble.textContent = text;
  
  messageDiv.appendChild(messageBubble);
  chatMessages.appendChild(messageDiv);
  chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Handle form submission
chatForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const message = messageInput.value.trim();
  if (!message) return;
  
  // Add user message
  addMessage(message, true);
  messageInput.value = '';
  
  try {
    // Send message to server
    const response = await fetch(`/${sessionId}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ message })
    });
    
    const data = await response.json();
    
    // Add AI response
    addMessage(data.response);
  } catch (error) {
    console.error('Error sending message:', error);
    addMessage('Sorry, there was an error processing your message. Please try again.');
  }
});

// Handle end chat
endChatBtn.addEventListener('click', async () => {
  if (confirm('Are you sure you want to end this consultation? A medical report will be generated.')) {
    try {
      const response = await fetch(`/${sessionId}/end`, {
        method: 'POST'
      });
      
      if (response.ok) {
        window.location.href = response.url;
      } else {
        alert('Error ending consultation. Please try again.');
      }
    } catch (error) {
      console.error('Error ending chat:', error);
      alert('Error ending consultation. Please try again.');
    }
  }
});

// Focus on input when page loads
messageInput.focus();
</script>

<%- include('../partials/footer') %>