<%- include('../partials/header') %>

<div class="container mx-auto px-4 py-8 max-w-4xl">
  <div class="bg-white rounded-lg shadow-lg">
    <!-- Header -->
    <div class="bg-blue-600 text-white p-4 rounded-t-lg">
      <h1 class="text-xl font-semibold">Virtual Medical Consultation</h1>
      <p class="text-sm opacity-90">Session ID: <%= sessionId %></p>
    </div>

    <!-- Voice Status -->
    <div id="voice-status" class="bg-gray-50 p-3 border-b hidden">
      <div class="flex items-center justify-center space-x-2">
        <div id="voice-indicator" class="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
        <span id="voice-status-text" class="text-sm text-gray-600">Listening...</span>
      </div>
    </div>

    <!-- Chat Messages -->
    <div id="chat-messages" class="h-96 overflow-y-auto p-4 space-y-4">
      <div class="flex justify-center">
        <div class="bg-gray-100 rounded-lg p-3 max-w-xs">
          <p class="text-sm text-gray-600">Welcome! I'm Dr. Cupper, your AI medical assistant. How can I help you today?</p>
        </div>
      </div>
    </div>

    <!-- Input Area -->
    <div class="border-t p-4">
      <form id="chat-form" class="flex gap-2">
        <input 
          type="text" 
          id="message-input" 
          placeholder="Type your message here..." 
          class="flex-1 border border-gray-300 rounded-lg px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
          required
        >
        <button 
          type="submit" 
          class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          Send
        </button>
        <button 
          type="button" 
          id="voice-btn" 
          class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500"
        >
          🎤 Voice
        </button>
        <button 
          type="button" 
          id="voice-toggle-btn" 
          class="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500"
        >
          🔊 AI Voice: ON
        </button>
      </form>
      
      <div class="mt-4 flex justify-between">
        <button 
          id="end-chat-btn" 
          class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500"
        >
          End Consultation & Generate Report
        </button>
        <span class="text-sm text-gray-500">Your conversation will be saved for the medical report</span>
      </div>
    </div>
  </div>
</div>

<script>
const sessionId = '<%= sessionId %>';
const chatMessages = document.getElementById('chat-messages');
const chatForm = document.getElementById('chat-form');
const messageInput = document.getElementById('message-input');
const endChatBtn = document.getElementById('end-chat-btn');
const voiceBtn = document.getElementById('voice-btn');
const voiceToggleBtn = document.getElementById('voice-toggle-btn');
const voiceStatus = document.getElementById('voice-status');
const voiceIndicator = document.getElementById('voice-indicator');
const voiceStatusText = document.getElementById('voice-status-text');

// Voice setup
let recognition = null;
let isListening = false;
let aiVoiceEnabled = true;

// Initialize speech recognition
function initSpeechRecognition() {
  if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
    recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    recognition.continuous = false;
    recognition.interimResults = false;
    recognition.lang = 'en-US';
    
    recognition.onstart = () => {
      isListening = true;
      voiceStatus.classList.remove('hidden');
      voiceBtn.textContent = '🔴 Stop';
      voiceBtn.classList.remove('bg-green-600', 'hover:bg-green-700');
      voiceBtn.classList.add('bg-red-600', 'hover:bg-red-700');
    };
    
    recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      messageInput.value = transcript;
      setTimeout(() => chatForm.dispatchEvent(new Event('submit')), 500);
    };
    
    recognition.onerror = (event) => {
      console.error('Speech recognition error:', event.error);
      stopListening();
    };
    
    recognition.onend = () => {
      stopListening();
    };
  } else {
    voiceBtn.disabled = true;
    voiceBtn.textContent = '🎤 Not Supported';
    voiceBtn.classList.add('opacity-50');
  }
}

// Stop listening
function stopListening() {
  if (recognition) recognition.stop();
  isListening = false;
  voiceStatus.classList.add('hidden');
  voiceBtn.textContent = '🎤 Voice';
  voiceBtn.classList.remove('bg-red-600', 'hover:bg-red-700');
  voiceBtn.classList.add('bg-green-600', 'hover:bg-green-700');
}

// Voice input toggle
voiceBtn.addEventListener('click', () => {
  if (!recognition) {
    alert('Speech recognition is not supported in your browser.');
    return;
  }
  
  if (isListening) {
    stopListening();
  } else {
    recognition.start();
  }
});

// AI voice toggle
voiceToggleBtn.addEventListener('click', () => {
  aiVoiceEnabled = !aiVoiceEnabled;
  voiceToggleBtn.textContent = aiVoiceEnabled ? '🔊 AI Voice: ON' : '🔇 AI Voice: OFF';
  voiceToggleBtn.classList.toggle('bg-purple-600', aiVoiceEnabled);
  voiceToggleBtn.classList.toggle('bg-gray-600', !aiVoiceEnabled);
  
  if (!aiVoiceEnabled && window.speechSynthesis) {
    window.speechSynthesis.cancel();
  }
});










function speakText(text) {
  if (!window.speechSynthesis || !aiVoiceEnabled) return;

  window.speechSynthesis.cancel();
  const utterance = new SpeechSynthesisUtterance(text);

  // Step 1: Detect language (Hindi or English)
  const isHindi = /[\u0900-\u097F]/.test(text); // Detects Devanagari (Hindi) characters
  utterance.lang = isHindi ? 'hi-IN' : 'en-US'; // Set language code

  // Step 2: Find the best voice for the detected language
  const voices = window.speechSynthesis.getVoices();
  let preferredVoice;

  if (isHindi) {
    // Prefer Hindi female voices (e.g., "Google हिन्दी" or "Microsoft Madhur")
    preferredVoice = voices.find(voice => 
      voice.lang === 'hi-IN' || 
      voice.name.includes("Hindi") ||
      voice.name.includes("Madhur") // Windows Hindi voice
    );
  } else {
    // Prefer English female voices (e.g., "Zira" or "Samantha")
    preferredVoice = voices.find(voice => 
      voice.lang === 'en-US' && (
        voice.name.includes("Female") || 
        voice.name.includes("Woman") ||
        voice.name.includes("Zira") || 
        voice.name.includes("Samantha")
      )
    );
  }

  // Step 3: Apply voice + settings
  if (preferredVoice) {
    utterance.voice = preferredVoice;
    utterance.rate = 1.0;  // Normal speed
    utterance.pitch = 1.2; // Slightly higher pitch
  } else {
    // Fallback: Use default voice with extreme settings
    utterance.rate = 1.9;
    utterance.pitch = 1.8;
  }

  utterance.volume = 0.8;
  window.speechSynthesis.speak(utterance);
}

// Load voices on startup (critical for Chrome)
document.addEventListener('DOMContentLoaded', () => {
  const loadVoices = () => {
    const voices = window.speechSynthesis.getVoices();
    if (voices.length === 0) {
      window.speechSynthesis.onvoiceschanged = loadVoices;
    }
  };
  loadVoices();
});















// Simple text-to-speech
// function speakText(text) {
//   if (window.speechSynthesis && aiVoiceEnabled) {
//     window.speechSynthesis.cancel();
//     const utterance = new SpeechSynthesisUtterance(text);
//     utterance.rate = 1.9;
//     utterance.pitch = 1.8;
//     utterance.volume = 0.8;
//     utterance.lang = 'en-US';
//     window.speechSynthesis.speak(utterance);
//   }
// }

// Add message to chat
function addMessage(text, isUser = false) {
  const messageDiv = document.createElement('div');
  messageDiv.className = `flex ${isUser ? 'justify-end' : 'justify-start'}`;
  
  const messageBubble = document.createElement('div');
  messageBubble.className = `rounded-lg p-3 max-w-xs ${
    isUser ? 'bg-blue-600 text-white' : 'bg-gray-100 text-gray-800'
  }`;
  messageBubble.textContent = text;
  
  messageDiv.appendChild(messageBubble);
  chatMessages.appendChild(messageDiv);
  chatMessages.scrollTop = chatMessages.scrollHeight;
  
  // Speak AI responses
  if (!isUser) {
    speakText(text);
  }
}

// Handle form submission
chatForm.addEventListener('submit', async (e) => {
  e.preventDefault();
  
  const message = messageInput.value.trim();
  if (!message) return;
  
  if (isListening) stopListening();
  
  addMessage(message, true);
  messageInput.value = '';
  
  try {
    const response = await fetch(`/${sessionId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ message })
    });
    
    const data = await response.json();
    addMessage(data.response);
  } catch (error) {
    console.error('Error sending message:', error);
    addMessage('Sorry, there was an error processing your message. Please try again.');
  }
});

// Handle end chat
endChatBtn.addEventListener('click', async () => {
  if (confirm('Are you sure you want to end this consultation? A medical report will be generated.')) {
    if (window.speechSynthesis) window.speechSynthesis.cancel();
    
    try {
      const response = await fetch(`/${sessionId}/end`, { method: 'POST' });
      if (response.ok) {
        window.location.href = response.url;
      } else {
        alert('Error ending consultation. Please try again.');
      }
    } catch (error) {
      console.error('Error ending chat:', error);
      alert('Error ending consultation. Please try again.');
    }
  }
});

// Initialize
document.addEventListener('DOMContentLoaded', () => {
  initSpeechRecognition();
  messageInput.focus();
});
</script>

<%- include('../partials/footer') %>